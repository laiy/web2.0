// Generated by CoffeeScript 1.8.0
(function() {
  var Maze, Piece, maze;

  Piece = (function() {
    function Piece(col, row, id, element) {
      this.col = col;
      this.row = row;
      this.id = id;
      this.element = element;
    }

    return Piece;

  })();

  Maze = (function() {
    function Maze(pieces, blankPosition) {
      this.pieces = pieces != null ? pieces : [];
      this.blankPosition = blankPosition != null ? blankPosition : 16;
    }

    Maze.prototype.push = function(piece) {
      return this.pieces.push(piece);
    };

    Maze.prototype.initialize = function() {
      this.initializeDataStructure();
      this.initializePieceElement();
      return this.updatePosition();
    };

    Maze.prototype.initializeDataStructure = function() {
      var col, piece, pieces, row, _results;
      col = 1;
      pieces = document.getElementById('puzzlearea').getElementsByTagName('div');
      _results = [];
      while (col < 5) {
        row = 1;
        while (row < 5) {
          piece = new Piece(col, row, (col - 1) * 4 + row, pieces[(col - 1) * 4 + row - 1]);
          this.push(piece);
          row++;
        }
        _results.push(col++);
      }
      return _results;
    };

    Maze.prototype.initializePieceElement = function() {
      var piece, _i, _len, _ref, _results;
      _ref = this.pieces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.element !== void 0) {
          _results.push(piece.element.style.backgroundPosition = -(piece.row - 1) * 96 + "px " + -(piece.col - 1) * 96 + "px");
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Maze.prototype.updatePosition = function() {
      var blankCol, blankRow, piece, _i, _len, _ref, _results;
      blankCol = Math.ceil(this.blankPosition / 4);
      blankRow = this.blankPosition % 4 ? this.blankPosition % 4 : 4;
      _ref = this.pieces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.element !== void 0) {
          piece.element.style.left = (piece.row - 1) * 96 + "px";
          piece.element.style.top = (piece.col - 1) * 96 + "px";
          if (Math.abs(piece.row - blankRow) + Math.abs(piece.col - blankCol) > 1) {
            _results.push(piece.element.className = 'puzzlepiece');
          } else {
            _results.push(piece.element.className = 'puzzlepiece movablepiece');
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Maze;

  })();

  maze = new Maze;

  window.onload = function() {
    return maze.initialize();
  };

}).call(this);
