// Generated by CoffeeScript 1.8.0
(function() {
  var Maze, Piece, maze;

  Piece = (function() {
    function Piece(col, row, id, element) {
      this.col = col;
      this.row = row;
      this.id = id;
      this.element = element;
    }

    return Piece;

  })();

  Maze = (function() {
    function Maze(pieces, blankCol, blankRow) {
      this.pieces = pieces != null ? pieces : [];
      this.blankCol = blankCol != null ? blankCol : 4;
      this.blankRow = blankRow != null ? blankRow : 4;
    }

    Maze.prototype.push = function(piece) {
      return this.pieces.push(piece);
    };

    Maze.prototype.initialize = function() {
      var ele, that;
      this.initializeDataStructure();
      this.initializePieceElement();
      this.updatePosition();
      that = this;
      document.getElementById('shufflebutton').addEventListener('click', function() {
        return that.shuffle(that);
      });
      ele = document.getElementById('background-image');
      return ele.onchange = (function(ele) {
        return function() {
          return that.changeBackground(ele);
        };
      })(ele);
    };

    Maze.prototype.initializeDataStructure = function() {
      var col, ele, onePiece, piece, pieces, row, that, _results;
      col = 1;
      pieces = document.getElementById('puzzlearea').getElementsByTagName('div');
      _results = [];
      while (col < 5) {
        row = 1;
        while (row < 5) {
          piece = new Piece(col, row, (col - 1) * 4 + row, pieces[(col - 1) * 4 + row - 1]);
          if (piece.element !== void 0) {
            this.push(piece);
            onePiece = this.pieces[(col - 1) * 4 + row - 1];
            that = this;
            ele = onePiece.element;
            onePiece.element.onclick = (function(ele) {
              return function() {
                return that.pieceClickHandler(ele);
              };
            })(ele);
          }
          row++;
        }
        _results.push(col++);
      }
      return _results;
    };

    Maze.prototype.initializePieceElement = function() {
      var piece, _i, _len, _ref, _results;
      _ref = this.pieces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.element !== void 0) {
          _results.push(piece.element.style.backgroundPosition = -(piece.row - 1) * 96 + "px " + -(piece.col - 1) * 96 + "px");
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Maze.prototype.updatePosition = function() {
      var piece, _i, _len, _ref, _results;
      _ref = this.pieces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.element !== void 0) {
          piece.element.style.left = (piece.row - 1) * 96 + "px";
          piece.element.style.top = (piece.col - 1) * 96 + "px";
          if (Math.abs(piece.row - this.blankRow) + Math.abs(piece.col - this.blankCol) > 1) {
            _results.push(piece.element.className = 'puzzlepiece');
          } else {
            _results.push(piece.element.className = 'puzzlepiece movablepiece');
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Maze.prototype.pieceClickHandler = function(ele) {
      var index;
      index = parseInt(ele.textContent);
      if (Math.abs(this.pieces[index - 1].row - this.blankRow) + Math.abs(this.pieces[index - 1].col - this.blankCol) <= 1) {
        this.move(index);
        this.updatePosition();
        if (this.completed()) {
          alert('You Win!');
          return this.shuffle();
        }
      }
    };

    Maze.prototype.move = function(index) {
      this.pieces[index - 1].col ^= this.blankCol;
      this.blankCol ^= this.pieces[index - 1].col;
      this.pieces[index - 1].col ^= this.blankCol;
      this.pieces[index - 1].row ^= this.blankRow;
      this.blankRow ^= this.pieces[index - 1].row;
      return this.pieces[index - 1].row ^= this.blankRow;
    };

    Maze.prototype.completed = function() {
      var index;
      index = 1;
      while (index <= 15) {
        if ((this.pieces[index - 1].col - 1) * 4 + this.pieces[index - 1].row !== this.pieces[index - 1].id) {
          return false;
        }
        index++;
      }
      return true;
    };

    Maze.prototype.shuffle = function(that) {
      var changeCol, movingUp, times, _results;
      times = 100;
      _results = [];
      while (times > 0) {
        changeCol = Math.round(Math.random());
        movingUp = Math.round(Math.random());
        if (that) {
          that.randomMove(changeCol, movingUp);
        } else {
          this.randomMove(changeCol, movingUp);
        }
        _results.push(times--);
      }
      return _results;
    };

    Maze.prototype.randomMove = function(changeCol, movingUp) {
      var col, row;
      col = this.blankCol;
      row = this.blankRow;
      if (changeCol) {
        col = movingUp && this.isValid(col + 1) ? col + 1 : this.isValid(col - 1) ? col - 1 : col;
      } else {
        row = movingUp && this.isValid(row + 1) ? row + 1 : this.isValid(row - 1) ? row - 1 : row;
      }
      if (col !== this.blankCol || row !== this.blankRow) {
        if ((col - 1) * 4 + row !== 16) {
          this.move((col - 1) * 4 + row);
          return this.updatePosition();
        }
      }
    };

    Maze.prototype.isValid = function(position) {
      if (position >= 1 && position <= 4) {
        return true;
      } else {
        return false;
      }
    };

    Maze.prototype.changeBackground = function(ele) {
      var picture, piece, _i, _len, _ref, _results;
      picture = ele.value;
      _ref = this.pieces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        _results.push(piece.element.style.backgroundImage = 'url(' + picture + ')');
      }
      return _results;
    };

    return Maze;

  })();

  maze = new Maze;

  window.onload = function() {
    return maze.initialize();
  };

}).call(this);
